,class,description
0,When_routing_topology_supports_delayed_delivery,The length of the parameter coreExternalTimeoutManagerAddressKey is 36.
1,APIApprovals,"The length of the statement  ""            var publicApi = ApiGenerator.GeneratePublicApi(typeof(RabbitMQTransport).Assembly' excludeAttributes: new[] { ""System.Runtime.Versioning.TargetFrameworkAttribute"" }); "" is 166."
2,MessageConverterTests,"The length of the statement  ""                    {""Foo""' new List<object>{new Dictionary<string' object>{{""key1""' Encoding.UTF8.GetBytes(""value1"")}' {""key2""' Encoding.UTF8.GetBytes(""value2"")}}}} "" is 145."
3,OutgoingMessageBuilder,"The length of the statement  ""                    transportOperations.Add(new TransportOperation(message' new MulticastAddressTag(eventType)' dispatchConsistency' constraints)); "" is 127."
4,OutgoingMessageBuilder,"The length of the statement  ""                    transportOperations.Add(new TransportOperation(message' new UnicastAddressTag(destination)' dispatchConsistency' constraints)); "" is 127."
5,RabbitMqContext,"The length of the statement  ""            messagePump = new MessagePump(connectionFactory' new MessageConverter()' ""Unit test""' channelProvider' purger' TimeSpan.FromMinutes(2)' 3' 0); "" is 142."
6,RabbitMqContext,"The length of the statement  ""            routingTopology.Reset(connectionFactory' new[] { ReceiverQueue }.Concat(AdditionalReceiverQueues)' new[] { ErrorQueue }); "" is 121."
7,When_consuming_messages,"The length of the statement  ""            var transportOperations = new TransportOperations(new TransportOperation(message' new UnicastAddressTag(ReceiverQueue))); "" is 121."
8,When_sending_a_message_over_rabbitmq,"The length of the statement  ""            return Verify(new OutgoingMessageBuilder().WithBody(body)' (IncomingMessage received) => Assert.AreEqual(body' received.Body)); "" is 127."
9,When_sending_a_message_over_rabbitmq,"The length of the statement  ""            return Verify(new OutgoingMessageBuilder().WithHeader(Headers.ContentType' ""application/json"")' received => Assert.AreEqual(""application/json""' received.BasicProperties.ContentType)); "" is 183."
10,When_sending_a_message_over_rabbitmq,"The length of the statement  ""            return Verify(new OutgoingMessageBuilder()' received => Assert.AreEqual(""application/octet-stream""' received.BasicProperties.ContentType)); "" is 139."
11,When_sending_a_message_over_rabbitmq,"The length of the statement  ""            return Verify(new OutgoingMessageBuilder().WithHeader(Headers.EnclosedMessageTypes' messageType.AssemblyQualifiedName)' received => Assert.AreEqual(messageType.FullName' received.BasicProperties.Type)); "" is 202."
12,When_sending_a_message_over_rabbitmq,"The length of the statement  ""            return Verify(new OutgoingMessageBuilder().TimeToBeReceived(timeToBeReceived)' received => Assert.AreEqual(timeToBeReceived.TotalMilliseconds.ToString()' received.BasicProperties.Expiration)); "" is 192."
13,When_sending_a_message_over_rabbitmq,"The length of the statement  ""            return Verify(new OutgoingMessageBuilder().CorrelationId(correlationId)' result => Assert.AreEqual(correlationId' result.Headers[Headers.CorrelationId])); "" is 154."
14,When_sending_a_message_over_rabbitmq,"The length of the statement  ""            return Verify(new OutgoingMessageBuilder()' result => Assert.True(result.Headers[Headers.NonDurableMessage] == ""False"")); "" is 121."
15,When_sending_a_message_over_rabbitmq,"The length of the statement  ""            return Verify(new OutgoingMessageBuilder().NonDurable()' result => Assert.True(result.Headers[Headers.NonDurableMessage] == ""True"")); "" is 133."
16,When_sending_a_message_over_rabbitmq,"The length of the statement  ""            var messageId = operations.MulticastTransportOperations.FirstOrDefault()?.Message.MessageId ?? operations.UnicastTransportOperations.FirstOrDefault()?.Message.MessageId; "" is 169."
17,When_sending_a_message_over_rabbitmq,"The length of the statement  ""                return new BasicDeliverEventArgs(""""' message.DeliveryTag' message.Redelivered' message.Exchange' message.RoutingKey' message.BasicProperties' message.Body); "" is 156."
18,When_subscribed_to_a_event,"The length of the statement  ""            var message = new OutgoingMessageBuilder().WithBody(new byte[0]).CorrelationId(type.FullName).PublishType(type).Build(); "" is 120."
19,ConnectionConfigurationTests,"The length of the statement  ""            Assert.Throws<NotSupportedException>(() => ConnectionConfiguration.Create(""virtualHost=Copa;username=Copa;password=abc_xyz;port=12345;requestedHeartbeat=3""' endpointName)); "" is 172."
20,ConnectionConfigurationTests,"The length of the statement  ""            var connectionConfiguration = ConnectionConfiguration.Create(""host=localhost;certPath=/path/keyfile.p12""' endpointName); "" is 120."
21,ConnectionConfigurationTests,"The length of the statement  ""            Assert.Throws<ArgumentException>(() => ConnectionConfiguration.Create(""not a well formed name value pair;""' endpointName)); "" is 123."
22,ConnectionConfigurationTests,"The length of the statement  ""            Assert.That(exception.Message' Does.Contain(""'notaport1' is not a valid Int32 value for the port in the 'host' connection string option."")); "" is 140."
23,ConnectionConfigurationTests,"The length of the statement  ""            Assert.That(exception.Message' Does.Contain(""'notaport2' is not a valid Int32 value for the 'port' connection string option."")); "" is 128."
24,ConnectionConfigurationTests,"The length of the statement  ""            Assert.That(exception.Message' Does.Contain(""'notusetls' is not a valid Boolean value for the 'useTls' connection string option."")); "" is 132."
25,ConnectionConfigurationTests,"The length of the statement  ""            Assert.That(exception.Message' Does.Contain(""'notaheartbeat' is not a valid UInt16 value for the 'requestedHeartbeat' connection string option."")); "" is 147."
26,ConnectionConfigurationTests,"The length of the statement  ""            Assert.That(exception.Message' Does.Contain(""'notaretrydelay' is not a valid TimeSpan value for the 'retryDelay' connection string option."")); "" is 142."
27,When_routing_topology_supports_delayed_delivery,"The length of the statement  ""            Assert.AreEqual(""The transport has been configured to enable the timeout manager' but the timeout manager is not active."" + "" is 123."
28,When_routing_topology_supports_delayed_delivery,"The length of the statement  ""                        ""Ensure that the timeout manager is active or remove the call to 'EndpointConfiguration.UseTransport<RabbitMQTransport>().DelayedDelivery().EnableTimeoutManager()'.""' result.ErrorMessage); "" is 188."
29,When_routing_topology_supports_delayed_delivery,"The length of the statement  ""            Assert.AreEqual(""The transport has been configured to enable the timeout manager' but the timeout manager is not active."" + "" is 123."
30,When_routing_topology_supports_delayed_delivery,"The length of the statement  ""                        ""Ensure that the timeout manager is active or remove the call to 'EndpointConfiguration.UseTransport<RabbitMQTransport>().DelayedDelivery().EnableTimeoutManager()'.""' result.ErrorMessage); "" is 188."
31,MessageConverterTests,"The following statement contains a magic number: var message = new BasicDeliverEventArgs              {                  BasicProperties = new BasicProperties                  {                      MessageId = ""Blah""'                      Headers = new Dictionary<string' object>                      {                          {""short""' (short)42}'                          {""int""' 42}'                          {""long""' 42L}'                          {""decimal""' 42m}'                          {""sbyte""' (sbyte)42}'                          {""double""' 42d}'                          {""single""' 42f}'                          {""bool""' true }                      }                  }              };"
32,MessageConverterTests,"The following statement contains a magic number: var message = new BasicDeliverEventArgs              {                  BasicProperties = new BasicProperties                  {                      MessageId = ""Blah""'                      Headers = new Dictionary<string' object>                      {                          {""short""' (short)42}'                          {""int""' 42}'                          {""long""' 42L}'                          {""decimal""' 42m}'                          {""sbyte""' (sbyte)42}'                          {""double""' 42d}'                          {""single""' 42f}'                          {""bool""' true }                      }                  }              };"
33,MessageConverterTests,"The following statement contains a magic number: var message = new BasicDeliverEventArgs              {                  BasicProperties = new BasicProperties                  {                      MessageId = ""Blah""'                      Headers = new Dictionary<string' object>                      {                          {""short""' (short)42}'                          {""int""' 42}'                          {""long""' 42L}'                          {""decimal""' 42m}'                          {""sbyte""' (sbyte)42}'                          {""double""' 42d}'                          {""single""' 42f}'                          {""bool""' true }                      }                  }              };"
34,MessageConverterTests,"The following statement contains a magic number: var message = new BasicDeliverEventArgs              {                  BasicProperties = new BasicProperties                  {                      MessageId = ""Blah""'                      Headers = new Dictionary<string' object>                      {                          {""short""' (short)42}'                          {""int""' 42}'                          {""long""' 42L}'                          {""decimal""' 42m}'                          {""sbyte""' (sbyte)42}'                          {""double""' 42d}'                          {""single""' 42f}'                          {""bool""' true }                      }                  }              };"
35,MessageConverterTests,"The following statement contains a magic number: var message = new BasicDeliverEventArgs              {                  BasicProperties = new BasicProperties                  {                      MessageId = ""Blah""'                      Headers = new Dictionary<string' object>                      {                          {""short""' (short)42}'                          {""int""' 42}'                          {""long""' 42L}'                          {""decimal""' 42m}'                          {""sbyte""' (sbyte)42}'                          {""double""' 42d}'                          {""single""' 42f}'                          {""bool""' true }                      }                  }              };"
36,MessageConverterTests,"The following statement contains a magic number: var message = new BasicDeliverEventArgs              {                  BasicProperties = new BasicProperties                  {                      MessageId = ""Blah""'                      Headers = new Dictionary<string' object>                      {                          {""short""' (short)42}'                          {""int""' 42}'                          {""long""' 42L}'                          {""decimal""' 42m}'                          {""sbyte""' (sbyte)42}'                          {""double""' 42d}'                          {""single""' 42f}'                          {""bool""' true }                      }                  }              };"
37,MessageConverterTests,"The following statement contains a magic number: var message = new BasicDeliverEventArgs              {                  BasicProperties = new BasicProperties                  {                      MessageId = ""Blah""'                      Headers = new Dictionary<string' object>                      {                          {""short""' (short)42}'                          {""int""' 42}'                          {""long""' 42L}'                          {""decimal""' 42m}'                          {""sbyte""' (sbyte)42}'                          {""double""' 42d}'                          {""single""' 42f}'                          {""bool""' true }                      }                  }              };"
38,RabbitMqContext,"The following statement contains a magic number: messagePump = new MessagePump(connectionFactory' new MessageConverter()' ""Unit test""' channelProvider' purger' TimeSpan.FromMinutes(2)' 3' 0);"
39,RabbitMqContext,"The following statement contains a magic number: messagePump = new MessagePump(connectionFactory' new MessageConverter()' ""Unit test""' channelProvider' purger' TimeSpan.FromMinutes(2)' 3' 0);"
40,When_stopping_endpoint,The following statement contains a magic number: var operations = new OutgoingMessageBuilder().WithBody(new byte[1]).SendTo(ReceiverQueue).Build(10000);
41,When_stopping_endpoint,The following statement contains a magic number: messagePump.Start(new PushRuntimeSettings(50));
42,When_stopping_endpoint,The following statement contains a magic number: await Task.Delay(500);
43,ConnectionConfigurationTests,The following statement contains a magic number: Assert.AreEqual(connectionConfiguration.Port' 1234);
44,ConnectionConfigurationTests,The following statement contains a magic number: Assert.AreEqual(connectionConfiguration.RequestedHeartbeat' 3);
45,ConnectionConfigurationTests,The following statement contains a magic number: Assert.AreEqual(connectionConfiguration.RetryDelay' new TimeSpan(1' 2' 3));
46,ConnectionConfigurationTests,The following statement contains a magic number: Assert.AreEqual(connectionConfiguration.RetryDelay' new TimeSpan(1' 2' 3));
47,ConnectionConfigurationTests,The following statement contains a magic number: Assert.AreEqual(connectionConfiguration.Port' 1001);
48,ConnectionConfigurationTests,The following statement contains a magic number: Assert.AreEqual(connectionConfiguration.Port' 1234);
49,ConnectionConfigurationTests,The following statement contains a magic number: Assert.AreEqual(connectionConfiguration.Port' 5672);
50,ConnectionConfigurationTests,The following statement contains a magic number: Assert.AreEqual(8181' connectionConfiguration.Port);
51,ConnectionConfigurationTests,The following statement contains a magic number: Assert.AreEqual(5' connectionConfiguration.RequestedHeartbeat);
52,ConnectionConfigurationTests,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(10)' connectionConfiguration.RetryDelay);
53,ConnectionConfigurationTests,The following statement contains a magic number: Assert.AreEqual(5671' connectionConfiguration.Port);
54,ConnectionConfigurationTests,The following statement contains a magic number: Assert.AreEqual(defaults.Port' 5672);
55,ConnectionConfigurationTests,The following statement contains a magic number: Assert.AreEqual(defaults.RequestedHeartbeat' 5);
56,ConnectionConfigurationTests,The following statement contains a magic number: Assert.AreEqual(defaults.RetryDelay' TimeSpan.FromSeconds(10));
57,When_calculating_a_routing_key,"The following statement contains a magic number: var result = DelayInfrastructure.CalculateRoutingKey(-123' ""some-address""' out var startingDelayLevel);"
