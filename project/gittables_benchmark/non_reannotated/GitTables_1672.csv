,class,description
0,VertexPipe<TIdVertex;TRevIdVertex;TVertexLabel;TKeyVertex;TValueVertex;TIdEdge;TRevIdEdge;TEdgeLabel;TKeyEdge;TValueEdge;TIdMultiEdge;TRevIdMultiEdge;TMultiEdgeLabel;TKeyMultiEdge;TValueMultiEdge;TIdHyperEdge;TRevIdHyperEdge;THyperEdgeLabel;TKeyHyperEdge;TValueHyperEdge>,Cyclomatic complexity of the method is 9
1,IGenericPropertyGraphExtensions,The method has 9 parameters. Parameters: Graph' Vertex1' Label' Vertex2' Label2' EdgeInitializer' EdgeInitializer2' EdgeId1' EdgeId2
2,IGenericPropertyGraphExtensions,The method has 7 parameters. Parameters: graph' VertexLabel' PropertyKey' IdCreator' EdgeLabel' Direction' RemoveProperty
3,IGenericPropertyVertexExtensions,The method has 5 parameters. Parameters: OutVertex' InVertex' EdgeInitializer' OnDuplicateEdge' AnywayDo
4,IGenericPropertyVertexExtensions,The method has 6 parameters. Parameters: OutVertex' Label' InVertex' EdgeInitializer' OnDuplicateEdge' AnywayDo
5,IGenericPropertyVertexExtensions,The method has 8 parameters. Parameters: OutVertex' EdgeId' Label' InVertex' EdgeInitializer' OnDuplicateEdge' EdgeIdAlreadyUsed' AnywayDo
6,IGenericPropertyVertexExtensions,The method has 5 parameters. Parameters: OutVertex' InVertex' EdgeInitializer' OnDuplicateEdge' AnywayDo
7,IGenericPropertyVertexExtensions,The method has 6 parameters. Parameters: OutVertex' Label' InVertex' EdgeInitializer' OnDuplicateEdge' AnywayDo
8,IGenericPropertyVertexExtensions,The method has 8 parameters. Parameters: OutVertex' EdgeId' Label' InVertex' EdgeInitializer' OnDuplicateEdge' EdgeIdAlreadyUsed' AnywayDo
9,IGenericPropertyVertexExtensions,The method has 5 parameters. Parameters: InVertex' OutVertex' EdgeInitializer' OnDuplicateEdge' AnywayDo
10,IGenericPropertyVertexExtensions,The method has 6 parameters. Parameters: InVertex' Label' OutVertex' EdgeInitializer' OnDuplicateEdge' AnywayDo
11,IGenericPropertyVertexExtensions,The method has 8 parameters. Parameters: InVertex' EdgeId' Label' OutVertex' EdgeInitializer' OnDuplicateEdge' EdgeIdAlreadyUsed' AnywayDo
12,IGenericPropertyVertexExtensions,The method has 5 parameters. Parameters: InVertex' OutVertex' EdgeInitializer' OnDuplicateEdge' AnywayDo
13,IGenericPropertyVertexExtensions,The method has 6 parameters. Parameters: InVertex' Label' OutVertex' EdgeInitializer' OnDuplicateEdge' AnywayDo
14,IGenericPropertyVertexExtensions,The method has 8 parameters. Parameters: InVertex' EdgeId' Label' OutVertex' EdgeInitializer' OnDuplicateEdge' EdgeIdAlreadyUsed' AnywayDo
15,IGenericPropertyGraph,The method has 6 parameters. Parameters: VertexId' Label' VertexInitializer' OnDuplicateVertex' VertexIdAlreadyUsed' AnywayDo
16,IGenericPropertyGraph,The method has 6 parameters. Parameters: OutVertex' Label' InVertex' EdgeInitializer' OnDuplicateEdge' AnywayDo
17,IGenericPropertyGraph,The method has 8 parameters. Parameters: EdgeId' OutVertex' Label' InVertex' EdgeInitializer' OnDuplicateEdge' EdgeIdAlreadyUsed' AnywayDo
18,IGenericPropertyGraph,The method has 5 parameters. Parameters: Id' Label' MultiEdgeInitializer' EdgeSelector' Edges
19,IGenericPropertyGraph,The method has 5 parameters. Parameters: Id' Label' HyperEdgeInitializer' VertexSelector' Vertices
20,IGenericPropertyGraph,The method has 6 parameters. Parameters: Name' Distributed' LongRunning' IsolationLevel' CreationTime' InvalidationTime
21,IQuadStore,The method has 6 parameters. Parameters: Name' Distributed' LongRunning' IsolationLevel' CreationTime' InvalidationTime
22,IQuadStore,The method has 5 parameters. Parameters: Subject' Predicate' Object' Context' Connect
23,IPropertyGraphTraverser,The method has 7 parameters. Parameters: IPropertyGraph' StartVertex' TraversalOrder' FollowThisEdge' MatchEvaluator' VertexMatchesAction' StopEvaluator
24,IGenericPropertyEdgeExtensions,"The length of the statement  ""            return Edge as IReadOnlyGenericPropertyEdge<TIdVertex'    TRevIdVertex'    TVertexLabel'    TKeyVertex'    TValueVertex' "" is 120."
25,IGenericPropertyGraphExtensions,"The length of the statement  ""            return Graph as IReadOnlyGenericPropertyGraph<TIdVertex'    TRevIdVertex'    TVertexLabel'    TKeyVertex'    TValueVertex' "" is 122."
26,IGenericPropertyGraphExtensions,"The length of the statement  ""            return new Tuple<IReadOnlyGenericPropertyEdge<TIdVertex'    TRevIdVertex'    TVertexLabel'    TKeyVertex'    TValueVertex' "" is 122."
27,IGenericPropertyHyperEdgeExtensions,"The length of the statement  ""            return HyperEdge as IReadOnlyGenericPropertyHyperEdge<TIdVertex'    TRevIdVertex'    TVertexLabel'    TKeyVertex'    TValueVertex' "" is 130."
28,IGenericPropertyMultiEdgeExtensions,"The length of the statement  ""            return MultiEdge as IReadOnlyGenericPropertyMultiEdge<TIdVertex'    TRevIdVertex'    TVertexLabel'    TKeyVertex'    TValueVertex' "" is 130."
29,IGenericPropertyVertexExtensions,"The length of the statement  ""            return Vertex as IReadOnlyGenericPropertyVertex<TIdVertex'    TRevIdVertex'    TVertexLabel'    TKeyVertex'    TValueVertex' "" is 124."
30,IReadOnlyGenericPropertyHyperEdgeExtensions,"The length of the statement  ""            return HyperEdge as IGenericPropertyHyperEdge<TIdVertex'    TRevIdVertex'    TVertexLabel'    TKeyVertex'    TValueVertex' "" is 122."
31,IReadOnlyGenericPropertyMultiEdgeExtensions,"The length of the statement  ""            return MultiEdge as IGenericPropertyMultiEdge<TIdVertex'    TRevIdVertex'    TVertexLabel'    TKeyVertex'    TValueVertex' "" is 122."
32,EdgeIdFilterPipeExtensions,"The length of the statement  ""                                        TIdHyperEdge' TRevIdHyperEdge' THyperEdgeLabel' TKeyHyperEdge' TValueHyperEdge>(SourcePipe' EdgeId => Ids.Where(id => id.Equals(EdgeId)).Any()); "" is 144."
33,EdgeIdFilterPipeExtensions,"The length of the statement  ""                                        TIdHyperEdge' TRevIdHyperEdge' THyperEdgeLabel' TKeyHyperEdge' TValueHyperEdge>(SourcePipe' EdgeId => Ids.Where(id => !id.Equals(EdgeId)).Any()); "" is 145."
34,EdgeLabelFilterPipeExtensions,"The length of the statement  ""                                           TIdHyperEdge' TRevIdHyperEdge' THyperEdgeLabel' TKeyHyperEdge' TValueHyperEdge>(SourcePipe' EdgeLabel => Labels.Where(label => label.Equals(EdgeLabel)).Any()); "" is 159."
35,EdgeLabelFilterPipeExtensions,"The length of the statement  ""                                           TIdHyperEdge' TRevIdHyperEdge' THyperEdgeLabel' TKeyHyperEdge' TValueHyperEdge>(SourcePipe' EdgeLabel => Labels.Where(label => !label.Equals(EdgeLabel)).Any()); "" is 160."
36,EdgeRevIdFilterPipeExtensions,"The length of the statement  ""                                           TIdHyperEdge' TRevIdHyperEdge' THyperEdgeLabel' TKeyHyperEdge' TValueHyperEdge>(SourcePipe' EdgeRevId => RevIds.Where(revid => revid.Equals(EdgeRevId)).Any()); "" is 159."
37,EdgeRevIdFilterPipeExtensions,"The length of the statement  ""                                           TIdHyperEdge' TRevIdHyperEdge' THyperEdgeLabel' TKeyHyperEdge' TValueHyperEdge>(SourcePipe' EdgeRevId => RevIds.Where(revid => !revid.Equals(EdgeRevId)).Any()); "" is 160."
38,VertexIdFilterPipeExtensions,"The length of the statement  ""                                          TIdHyperEdge' TRevIdHyperEdge' THyperEdgeLabel' TKeyHyperEdge' TValueHyperEdge>(SourcePipe' VertexId => Ids.Where(id => id.Equals(VertexId)).Any()); "" is 148."
39,VertexIdFilterPipeExtensions,"The length of the statement  ""                                          TIdHyperEdge' TRevIdHyperEdge' THyperEdgeLabel' TKeyHyperEdge' TValueHyperEdge>(SourcePipe' VertexId => Ids.Where(id => !id.Equals(VertexId)).Any()); "" is 149."
40,VertexLabelFilterPipeExtensions,"The length of the statement  ""                                             TIdHyperEdge' TRevIdHyperEdge' THyperEdgeLabel' TKeyHyperEdge' TValueHyperEdge>(SourcePipe' VertexLabel => Labels.Where(label => !label.Equals(VertexLabel)).Any()); "" is 164."
41,VertexRevIdFilterPipeExtensions,"The length of the statement  ""                                             TIdHyperEdge' TRevIdHyperEdge' THyperEdgeLabel' TKeyHyperEdge' TValueHyperEdge>(SourcePipe' VertexRevId => RevIds.Where(revid => revid.Equals(VertexRevId)).Any()); "" is 163."
42,VertexRevIdFilterPipeExtensions,"The length of the statement  ""                                             TIdHyperEdge' TRevIdHyperEdge' THyperEdgeLabel' TKeyHyperEdge' TValueHyperEdge>(SourcePipe' VertexRevId => RevIds.Where(revid => !revid.Equals(VertexRevId)).Any()); "" is 164."
43,GraphElementFilterPipeExtensions,"The length of the statement  ""            return new GraphElementFilterPipe<TId' TRevId' TLabel' TKey' TValue' T' S>(SourceElement' KeySelector' ComparisonFilter); "" is 121."
44,HyperEdgeVerticesPipeExtensions,"The length of the statement  ""                                             TIdHyperEdge' TRevIdHyperEdge' THyperEdgeLabel' TKeyHyperEdge' TValueHyperEdge>(IEnumerable' HyperEdgeLabels: HyperEdgeLabels); "" is 127."
45,HyperEdgesPipeExtensions,"The length of the statement  ""                                      TIdHyperEdge' TRevIdHyperEdge' THyperEdgeLabel' TKeyHyperEdge' TValueHyperEdge>(IEnumerable' HyperEdgeLabels: HyperEdgeLabels); "" is 127."
46,VertexPipe<TIdVertex;TRevIdVertex;TVertexLabel;TKeyVertex;TValueVertex;TIdEdge;TRevIdEdge;TEdgeLabel;TKeyEdge;TValueEdge;TIdMultiEdge;TRevIdMultiEdge;TMultiEdgeLabel;TKeyMultiEdge;TValueMultiEdge;TIdHyperEdge;TRevIdHyperEdge;THyperEdgeLabel;TKeyHyperEdge;TValueHyperEdge>,The following switch statement is missing a default case: switch (TraversalDirection)              {                  case Balder.TraversalDirection.In:   Edge2VertexDelegate = Edge => (Edge != null) ? Edge.InVertex  : null; break;                  case Balder.TraversalDirection.Out:  Edge2VertexDelegate = Edge => (Edge != null) ? Edge.OutVertex : null; break;                  case Balder.TraversalDirection.Both: Edge2VertexDelegate = Edge2BothVertices;                              break;              }
47,VertexPipe<TIdVertex;TRevIdVertex;TVertexLabel;TKeyVertex;TValueVertex;TIdEdge;TRevIdEdge;TEdgeLabel;TKeyEdge;TValueEdge;TIdMultiEdge;TRevIdMultiEdge;TMultiEdgeLabel;TKeyMultiEdge;TValueMultiEdge;TIdHyperEdge;TRevIdHyperEdge;THyperEdgeLabel;TKeyHyperEdge;TValueHyperEdge>,The following switch statement is missing a default case: switch (TraversalDirection)              {                  case Balder.TraversalDirection.In:   Edge2VertexDelegate = Edge => (Edge != null) ? Edge.InVertex  : null; break;                  case Balder.TraversalDirection.Out:  Edge2VertexDelegate = Edge => (Edge != null) ? Edge.OutVertex : null; break;                  case Balder.TraversalDirection.Both: Edge2VertexDelegate = Edge2BothVertices;                              break;              }
48,EdgesPipe<TIdVertex;TRevIdVertex;TVertexLabel;TKeyVertex;TValueVertex;TIdEdge;TRevIdEdge;TEdgeLabel;TKeyEdge;TValueEdge;TIdMultiEdge;TRevIdMultiEdge;TMultiEdgeLabel;TKeyMultiEdge;TValueMultiEdge;TIdHyperEdge;TRevIdHyperEdge;THyperEdgeLabel;TKeyHyperEdge;TValueHyperEdge>,The following switch statement is missing a default case: switch (TraversalDirection)              {                    case Balder.TraversalDirection.In:   Vertex2EdgesDelegate = vertex => vertex.InEdges (EdgeLabels).GetEnumerator();  break;                    case Balder.TraversalDirection.Out:  Vertex2EdgesDelegate = vertex => vertex.OutEdges(EdgeLabels).GetEnumerator();  break;                    case Balder.TraversalDirection.Both: Vertex2EdgesDelegate = vertex => vertex.InEdges (EdgeLabels).Concat(                                                                                        vertex.OutEdges(EdgeLabels)).GetEnumerator(); break;                }
49,EdgesPipe<TIdVertex;TRevIdVertex;TVertexLabel;TKeyVertex;TValueVertex;TIdEdge;TRevIdEdge;TEdgeLabel;TKeyEdge;TValueEdge;TIdMultiEdge;TRevIdMultiEdge;TMultiEdgeLabel;TKeyMultiEdge;TValueMultiEdge;TIdHyperEdge;TRevIdHyperEdge;THyperEdgeLabel;TKeyHyperEdge;TValueHyperEdge>,The following switch statement is missing a default case: switch (TraversalDirection)              {                    case Balder.TraversalDirection.In:   Vertex2EdgesDelegate = vertex => vertex.InEdges (EdgeFilter).GetEnumerator();  break;                    case Balder.TraversalDirection.Out:  Vertex2EdgesDelegate = vertex => vertex.OutEdges(EdgeFilter).GetEnumerator();  break;                    case Balder.TraversalDirection.Both: Vertex2EdgesDelegate = vertex => vertex. InEdges(EdgeFilter).Concat(                                                                                        vertex.OutEdges(EdgeFilter)).GetEnumerator(); break;                }
50,EdgesVerticesPipe<TIdVertex;TRevIdVertex;TVertexLabel;TKeyVertex;TValueVertex;TIdEdge;TRevIdEdge;TEdgeLabel;TKeyEdge;TValueEdge;TIdMultiEdge;TRevIdMultiEdge;TMultiEdgeLabel;TKeyMultiEdge;TValueMultiEdge;TIdHyperEdge;TRevIdHyperEdge;THyperEdgeLabel;TKeyHyperEdge;TValueHyperEdge>,The following switch statement is missing a default case: switch (TraversalDirection)              {                    case Balder.TraversalDirection.In:   Vertex2VerticesDelegate  =  vertex =>  vertex. InEdges(EdgeLabels).Select(Edge => Edge.OutVertex).GetEnumerator();                                                                                   break;                    case Balder.TraversalDirection.Out:  Vertex2VerticesDelegate  =  vertex =>  vertex.OutEdges(EdgeLabels).Select(Edge => Edge. InVertex).GetEnumerator();                                                                                   break;                    case Balder.TraversalDirection.Both: Vertex2VerticesDelegate  =  vertex => (vertex. InEdges(EdgeLabels).Select(Edge => Edge.OutVertex).Concat(                                                                                              vertex.OutEdges(EdgeLabels).Select(Edge => Edge. InVertex))).GetEnumerator();                                                                                   break;                }
51,EdgesVerticesPipe<TIdVertex;TRevIdVertex;TVertexLabel;TKeyVertex;TValueVertex;TIdEdge;TRevIdEdge;TEdgeLabel;TKeyEdge;TValueEdge;TIdMultiEdge;TRevIdMultiEdge;TMultiEdgeLabel;TKeyMultiEdge;TValueMultiEdge;TIdHyperEdge;TRevIdHyperEdge;THyperEdgeLabel;TKeyHyperEdge;TValueHyperEdge>,The following switch statement is missing a default case: switch (TraversalDirection)              {                    case Balder.TraversalDirection.In:   Vertex2VerticesDelegate  =  vertex =>  vertex. InEdges(IncludeEdges).Select(Edge => Edge.OutVertex).GetEnumerator();                                                                                   break;                    case Balder.TraversalDirection.Out:  Vertex2VerticesDelegate  =  vertex =>  vertex.OutEdges(IncludeEdges).Select(Edge => Edge. InVertex).GetEnumerator();                                                                                   break;                    case Balder.TraversalDirection.Both: Vertex2VerticesDelegate  =  vertex => (vertex. InEdges(IncludeEdges).Select(Edge => Edge.OutVertex).Concat(                                                                                              vertex.OutEdges(IncludeEdges).Select(Edge => Edge. InVertex))).GetEnumerator();                                                                                   break;                }
