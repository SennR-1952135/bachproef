,status,creator,description
0,Open,craftwithin,"The guide at http://commons.apache.org/proper/commons-fileupload/using.html incorrectly writes: ""Such temporary files are deleted automatically, if they are no longer used (more precisely, if the corresponding instance of java.io.File is garbage collected."".

(The following affects maven version: http://search.maven.org/#artifactdetails|commons-fileupload|commons-fileupload|1.2.2|jar )

However, the code for org.apache.commons.io.FileCleaningTracker.Tracker.Tracker(...) passes org.apache.commons.fileupload.disk.DiskFileItemFactory.this specified by org.apache.commons.fileupload.disk.DiskFileItemFactory.createItem(String, String, boolean, String) in tracker.track(result.getTempFile(), this), and not java.io.File. I.e. the ""using.html"" guide must be corrected.

The correct (fixed) phrasing is: 

""Such temporary files are deleted automatically, if they are no longer used (more precisely, if the corresponding instance of org.apache.commons.fileupload.disk.DiskFileItemFactory is garbage collected."".

(The following affects maven version: http://search.maven.org/#artifactdetails|commons-fileupload|commons-fileupload|1.3|jar )

However, the code for org.apache.commons.io.FileCleaningTracker.Tracker.Tracker(...) passes DiskFileItem.this specified by org.apache.commons.fileupload.disk.DiskFileItemFactory.createItem(String, String, boolean, String) in DiskFileItem result=[...]; [...]; tracker.track(result.getTempFile(), result), and not java.io.File. I.e. the ""using.html"" guide must be corrected.

The correct (fixed) phrasing is: 

""Such temporary files are deleted automatically, if they are no longer used (more precisely, if the corresponding instance of org.apache.commons.fileupload.disk.DiskFileItem is garbage collected."".

(The following holds for both versions 1.2.2 and 1.3)

The correct (fixed) phrasing is: 

""Such temporary files are deleted automatically, if they are no longer used (more precisely, if the corresponding instance of org.apache.commons.fileupload.disk.DiskFileItem (for commons-fileupload v.1.3) and instance of org.apache.commons.fileupload.disk.DiskFileItemFactory (for commons-fileupload v.1.2.2) is garbage collected."".
"
1,Closed,prcjac,"If a multipart request contains an empty file, ServletFileUpload#parseRequest does not create a corresponding temporary file on the file system. If any operations are performed on the corresponding file object from DiskFileItem#getStoreLocation() a FileNotFoundException is thrown.

FileUploadBase#parseRequest() copies the multipart file input stream to the temporary file output stream with Streams#copy(). This method only creates the temporary file on the file system if data is written to the file's output stream. Since the input stream is empty, write is never called on the output stream and the temporary file is not created.

I've used the following snippet to overcome this issue. This ensures the temporary file is created on the file system prior to writing:

{code:title=Snippet.java|borderStyle=solid}
final DiskFileItemFactory factory = new DiskFileItemFactory() {
  @Override
  public FileItem createItem(final String fieldName, final String contentType, final boolean isFormField, final String fileName) {
    return new DiskFileItem(fieldName, contentType, isFormField, fileName, getSizeThreshold(), getRepository()) {
      private static final long serialVersionUID = 1L;

      @Override
      protected File getTempFile() {
        File tempFile = super.getTempFile();
        try {
          tempFile.createNewFile();
        }
        catch (final IOException e) {
          //Handle appropriately
          ...
        }
        return tempFile;
      }
    };
  }
};

ServletFileUpload upload = new ServletFileUpload(factory);
{code}"
2,Closed,scop,"Javadoc build fails with Java 1.8, fix attached."
3,Closed,sebb@apache.org,"The method DiskFileItem#write has the following code:

{code}
FileOutputStream fout = null;
try {
    fout = new FileOutputStream(file);
    fout.write(get());
} finally {
    if (fout != null) {
        fout.close();
    }
}
{code}

If the write fails and then the close fails, the write failure will be masked by the close error. It might be better to write the code as:

{code}
FileOutputStream fout = null;
try {
    fout = new FileOutputStream(file);
    fout.write(get());
    fout.close();
} finally {
    IOUtils.closeQuietly(fout);
}
{code}

This would ensure that the first error was reported."
4,Closed,sebb@apache.org,"DiskFileItem#getTempFile() looks wrong.

Presumably the intention of providing the protected method was to allow the generation of the path name to be overwritten. This can indeed be done. 

However, if this is done, the tempFile variable will not be set up, so the path name won't be cached - unless the overriding method also caches the name.

The file name needs to agree with the DeferredFileOutputStream that is created. This is implied in the Javadoc, but is not currently enforced.

The protected method needs to implement the name generation part only."
5,Closed,sebb@apache.org,"FileUploadBase has several instances where the InputStream ""input"" is not closed when an Exception is throw. This can potentially be a resource leak and is best avoided.

The first case is easy to deal with, as the InputStream does not need to be created until after the SizeLimitExceededException has been thrown.

The next case occurs if the boundary is not found.
This check could be moved to before the size check, however that would change the behaviour slightly, as FileUploadException would be thrown instead of SizeLimitExceededException if both boundary and size are wrong.

The last case is where InvalidContentTypeException is thrown. This cannot easily be avoided."
6,Closed,b.eckenfels,"Because of a fix for FILEUPLOAD-246 I noticed that there is a fileRenameOrCopy function which swallows exceptions on the OutputStream#close() method. This is unsafe since a lot of filesystem operations can fail in exactly this step.

There is also a Commons IO Utility which does rename or copy, so the whole code block could be removed.

Problem is here in Line 416: http://svn.apache.org/viewvc/commons/proper/fileupload/trunk/src/main/java/org/apache/commons/fileupload/disk/DiskFileItem.java?revision=1568691&view=markup

Besides using FileUtil.move() another option would be to add a out.close() before the catch.
"
7,Closed,sebb@apache.org,"FileUpload already depends on Common IO, so it makes sense to simplify the code by using the method IOUtils#closeQuietly instead of code such as

{code}
if (out != null) {
    try {
        out.close();
    } catch (IOException e) {
        // ignore
    }
}
{code}"
8,Closed,sebb@apache.org,"DiskFileItem.get() invokes InputStream#read, and appears to assume that it will always read all available data. However that is not necessarily the case.

It would be safer to use the Commons IO method IOUtils#readFully

[The component already depends on CommonsIO]"
9,Closed,sebb@apache.org,Eclipse reports that .DiskFileItem.readObject fails to close FileInputStream
10,Closed,sebb@apache.org,"Code should never catch & ignore all Throwables.

For example, ThreadDeath may be caught, but must be rethrown.
VirtualMachineError must also never be swallowed.

See also

https://issues.apache.org/bugzilla/show_bug.cgi?id=48644
and
org/apache/tomcat/util/ExceptionUtils#handleThrowable()
https://svn.apache.org/repos/asf/tomcat/trunk/java/org/apache/tomcat/util/ExceptionUtils.java"
11,Closed,egphilippov,"The guide at http://commons.apache.org/proper/commons-fileupload/using.html incorrectly writes: ""Such temporary files are deleted automatically, if they are no longer used (more precisely, if the corresponding instance of java.io.File is garbage collected."".

(The following affects maven version: http://search.maven.org/#artifactdetails|commons-fileupload|commons-fileupload|1.2.2|jar )

However, the code for org.apache.commons.io.FileCleaningTracker.Tracker.Tracker(...) passes org.apache.commons.fileupload.disk.DiskFileItemFactory.this specified by org.apache.commons.fileupload.disk.DiskFileItemFactory.createItem(String, String, boolean, String) in tracker.track(result.getTempFile(), this), and not java.io.File. I.e. the ""using.html"" guide must be corrected.

The correct (fixed) phrasing is: 

""Such temporary files are deleted automatically, if they are no longer used (more precisely, if the corresponding instance of org.apache.commons.fileupload.disk.DiskFileItemFactory is garbage collected."".

(The following affects maven version: http://search.maven.org/#artifactdetails|commons-fileupload|commons-fileupload|1.3|jar )

However, the code for org.apache.commons.io.FileCleaningTracker.Tracker.Tracker(...) passes DiskFileItem.this specified by org.apache.commons.fileupload.disk.DiskFileItemFactory.createItem(String, String, boolean, String) in DiskFileItem result=[...]; [...]; tracker.track(result.getTempFile(), result), and not java.io.File. I.e. the ""using.html"" guide must be corrected.

The correct (fixed) phrasing is: 

""Such temporary files are deleted automatically, if they are no longer used (more precisely, if the corresponding instance of org.apache.commons.fileupload.disk.DiskFileItem is garbage collected."".

(The following holds for both versions 1.2.2 and 1.3)

The correct (fixed) phrasing is: 

""Such temporary files are deleted automatically, if they are no longer used (more precisely, if the corresponding instance of org.apache.commons.fileupload.disk.DiskFileItem (for commons-fileupload v.1.3) and instance of org.apache.commons.fileupload.disk.DiskFileItemFactory (for commons-fileupload v.1.2.2) is garbage collected."".
"
